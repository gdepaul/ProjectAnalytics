package server;

import java.util.ArrayList;
import java.util.List;
import java.sql.*;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.database.sqlite.SQLiteStatement;

public class DataHelper {
	private static final String DATABASE_NAME = "drmurphy.db";
	private static final int DATABASE_VERSION = 1;
	private Context context;
	private SQLiteDatabase db;
	static DataHelper sInstance;
	
	 //declare your tables

	//Patients Table
	static String createPatientsTable = "create table patients ("+
			"_id INTEGER PRIMARY KEY AUTOINCREMENT,"+
			"name TEXT,"+
			"phone TEXT,"+
			"email TEXT)";
	
	//Appointments Table
	static String createAppointmentsTable = "create table appointments ("+
			"_id INTEGER PRIMARY KEY AUTOINCREMENT," +
			"patientName TEXT,"+
			"date TEXT," +
			"time TEXT)";
	
	//declare your columns

	
	//create your dbfunctions 
	
	
	public DataHelper(Context context) {
		this.context = context;
		openDatabase();
	}

	public static DataHelper getInstance(Context context) {
		if (sInstance == null) {
			sInstance = new DataHelper(context);
		}
		sInstance.openDatabase();
		return sInstance;
	}

	private void openDatabase() {
		OpenHelper openHelper = new OpenHelper(this.context);
		db = openHelper.getWritableDatabase();
	}
	
	private static class OpenHelper extends SQLiteOpenHelper {
		OpenHelper(Context context) {
			super(context, DATABASE_NAME, null, DATABASE_VERSION);
		}

		@Override
		public void onCreate(SQLiteDatabase db) {
			//Create your tables
			//Create patients table
			db.execSQL(createPatientsTable);
			//Create Appointments table
			db.execSQL(createAppointmentsTable);
			
		}

		@Override
		public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
			db.execSQL("DROP TABLE IF EXISTS " + "patients");
			db.execSQL("DROP TABLE IF EXISTS " + "appointments");
			onCreate(db);
		}
	}

	public Cursor getNames() {
		
		Cursor cursor = this.db.query("patients", new String[] {"_id","name","phone",
				"email"}, null, null, null, null, null);
		return cursor;
	}
	
	public void insertPatient(Patient newPatient){
		
		ContentValues cv = new ContentValues();
		cv.put("name", newPatient.getName());
		cv.put("phone", newPatient.getPhone());
		cv.put("email", newPatient.getEmail());
		db.insert("patients", null, cv);
		
	}
	

	public void insertAppointment(Appointment newAppointment) {
		
		ContentValues cv = new ContentValues();
		cv.put("patientName", newAppointment.getPatientName());
		cv.put("date", newAppointment.getDate());
		cv.put("time", newAppointment.getTime());
		db.insert("appointments", null, cv);
		
	}
	
	public List<String> selectAll() {
		List<String> list = new ArrayList<String>();
		Cursor cursor = this.db.query("patients", new String[] {"_id","name","phone",
		"email"}, null, null, null, null, null);
		if (cursor.getCount() > 0) {
			if (cursor.moveToFirst()) {
				do {
					list.add(cursor.getString(1));
				} while (cursor.moveToNext());
			}
			if (cursor != null && !cursor.isClosed())
				cursor.close();			
		}
		return list;
	}

	public void deletePatient(int id_key) {
		String id = ""+id_key;
		String prevName = "undefined";
		
		Cursor cursor_patientDB = db.query("patients", null, "_id =?", new String[]{id}, null, null, null, null);
		if (cursor_patientDB != null){
			cursor_patientDB.moveToFirst();
			prevName = cursor_patientDB.getString(1);
		}
		
		db.delete("patients", "_id=?", new String[] { id });
		
		Cursor cursor_apptsDB = db.query("appointments", null, "patientName =?", new String[]{prevName.toString()}, null, null, null, null);
		if (cursor_apptsDB != null){
			db.delete("appointments", "patientName=?", new String[]{prevName});
		}
	}

	public String getPhone(String patientName) {
		String phone = "undefined";
		Cursor cursor = db.query("patients", null, "name =?", new String[]{patientName.toString()}, null, null, null, null);
		if (cursor != null){
			cursor.moveToFirst();
			phone = cursor.getString(2);
		}
		return phone;
	}
	
	public String getEmail(String patientName){
		String email = "undefined";
		Cursor cursor = db.query("patients", null, "name =?", new String[]{patientName.toString()}, null, null, null, null);
		if (cursor != null){
			cursor.moveToFirst();
			email = cursor.getString(3);
		}
		return email;
	}
	
	public int getID(String patientName) {
		int id_key=-99;
		Cursor cursor = db.query("patients", null, "name =?", new String[]{patientName.toString()}, null, null, null, null);
		if (cursor != null){
			cursor.moveToFirst();
			id_key = cursor.getInt(0);
		}
		return id_key;
	}

	
	public void updatePatientName(int id_key, String name) {
		String id = "" +id_key;
		String prevName = "undefined";
		Cursor cursor_patientDB = db.query("patients", null, "_id =?", new String[]{id}, null, null, null, null);
		if (cursor_patientDB != null){
			cursor_patientDB.moveToFirst();
			prevName = cursor_patientDB.getString(1);
		}
		
		ContentValues values_patientDB = new ContentValues();
		values_patientDB.put("name", name);
		db.update("patients", values_patientDB, "_id=?", new String[]{id});
		
		Cursor cursor_apptsDB = db.query("appointments", null, "patientName =?", new String[]{prevName.toString()}, null, null, null, null);
		if (cursor_apptsDB != null){
			ContentValues values_apptsDB = new ContentValues();
			values_apptsDB.put("patientName", name);
			db.update("appointments", values_apptsDB, "patientName=?", new String[]{prevName});
		}
		
	}

	public void updatePatientPhone(int id_key, String phone) {
		String id = "" +id_key;
		ContentValues values = new ContentValues();
		values.put("phone", phone);
		db.update("patients", values, "_id=?", new String[]{id});
	}

	public void updatePatientEmail(int id_key, String email) {
		String id = "" +id_key;
		ContentValues values = new ContentValues();
		values.put("email", email);
		db.update("patients", values, "_id=?", new String[]{id});
	}

	public List<String> selectAppointments() {
		List<String> list = new ArrayList<String>();
		Cursor cursor = this.db.query("appointments", new String[] {"_id","patientName","date",
		"time"}, null, null, null, null, null);
		if (cursor.getCount() > 0) {
			if (cursor.moveToFirst()) {
				do {
					list.add(cursor.getString(2)+" : " +cursor.getString(1) + " @ " + cursor.getString(3));
					// Date: name @ time
				} while (cursor.moveToNext());
			}
			if (cursor != null && !cursor.isClosed())
				cursor.close();			
		}
		return list;
	}
